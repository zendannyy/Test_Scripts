These scripts provide examples of how to do a few common tasks with Malwarebytes Breach Remediation for Mac.

A sample log file is also provided, for those wishing to roll their own log file analysis scripts, showing a representative sample of the different things that could be detected (Adware, identified by names starting with "Adware", potentially unwanted programs, identified by names starting with "PUP", and malware, identified by names starting with "OSX" or "Trojan").

https://www.malwarebytes.org/business/breachremediation/

The sample code described herein is provided on an "as is" basis,without warranty of any kind, to the fullest extent permitted bylaw.Malwarebytes does not warrant or guarantee the individual successdevelopers may have in implementing the sample code on their developmentplatforms. You are solely responsible for testing and maintaining allscripts.

Malwarebytes does not warrant, guarantee or make any representationsregarding the use, results of use, accuracy, timeliness or completenessof any data or information relating to the sample code. Malwarebytesdisclaims all warranties, express or implied, and in particular,disclaims all warranties of merchantability, fitness for a particularpurpose, and warranties related to the code, or any service orsoftwarerelated there to.


clean_quarantine.sh
	Deletes the contents of the quarantine folder, which is not yet a function provided by Breach Remediation for Mac.
	
get_version.sh
	Shows how to check for the presence of Breach Remediation and to get the version number, if it is present.
	
log file parser
	Contains a Python script for parsing the Breach Remediation for Mac log file and creating a JSON file with the data from that log file. Also contains a couple sample files: a large, real-world plain text log file and the resulting JSON file.
	
scan_and_notify_user.sh
	Shows how to script a scan, then interprets the information output to stdout to determine whether to show a message to the user, and if so what message to display. The message is displayed via the Notification mechanism in macOS.
	
scan_and_parse.sh
	Shows how to script a scan and then parse the log files to identify what, if anything, was found. Something like this could be scripted to run periodically, and could be extended to provide notifications when certain types of threats are detected. Note that it would also be possible to modify this script to parse the information sent to stdout during the scan, rather than looking at the logs, but this sample shows how to deal with the log files themselves.
	
scan_and_remove.sh
	Shows how to do a remediation scan and get information back on whether anything was removed and whether that removal will require a restart. Of course, that information would be in the output, but if you wanted to script this to perform other actions based on each condition, you could extend a script like this to do that.